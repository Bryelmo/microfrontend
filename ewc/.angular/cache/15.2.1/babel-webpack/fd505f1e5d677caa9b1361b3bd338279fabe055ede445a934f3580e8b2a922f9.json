{"ast":null,"code":"var _class;\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./menu-button.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./menu-button.component.scss?ngResource\";\nimport { Component, EventEmitter, HostBinding, Input, Output, ViewEncapsulation } from '@angular/core';\nlet MenuButtonComponent = (_class = class MenuButtonComponent {\n  constructor() {\n    this.wrapperClassNames = '';\n    this.classNames = '';\n    this.label = '';\n    this.icon = '';\n    this.appendTo = '';\n    this.menu = [];\n    this.action = new EventEmitter();\n    /**\n     *  @description I attach a command ActionEvent for each menu items that will be emitted for the parent component\n     *  @param {MenuItem[]} menu\n     *  @return {VoidFunction}\n     */\n    this.attachCommandAction = menu => {\n      const _menu = [...menu];\n      _menu.map(item => {\n        item.command = event => this.handleActions(item.label, event);\n        return item;\n      });\n    };\n    /**\n     *  @description I mount the Map type action event and I emit it into the parent component\n     * \tIf the event is already a Map type I get and remount data in a new one\n     *  @param {string | undefined} type\n     *  @param {Any} event\n     *  @return {VoidFunction}\n     */\n    this.handleActions = (type, event) => {\n      const action = {\n        type: type,\n        value: event\n      };\n      this.action.emit(action);\n    };\n  }\n  /**\n   *  @description At init of the component I attach an ActionEvent into the MenuItems\n   *  @return {VoidFunction}\n   */\n  ngOnInit() {\n    this.menu && this.menu.length > 0 && this.attachCommandAction(this.menu);\n  }\n}, _class.ctorParameters = () => [], _class.propDecorators = {\n  wrapperClassNames: [{\n    type: HostBinding,\n    args: ['class']\n  }, {\n    type: Input\n  }],\n  classNames: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  icon: [{\n    type: Input\n  }],\n  appendTo: [{\n    type: Input\n  }],\n  menu: [{\n    type: Input\n  }],\n  action: [{\n    type: Output\n  }]\n}, _class);\nMenuButtonComponent = __decorate([Component({\n  selector: 'ewc-menu-button',\n  template: __NG_CLI_RESOURCE__0,\n  encapsulation: ViewEncapsulation.None,\n  styles: [__NG_CLI_RESOURCE__1]\n})], MenuButtonComponent);\nexport { MenuButtonComponent };","map":{"version":3,"names":["__decorate","__NG_CLI_RESOURCE__0","__NG_CLI_RESOURCE__1","Component","EventEmitter","HostBinding","Input","Output","ViewEncapsulation","MenuButtonComponent","_class","constructor","wrapperClassNames","classNames","label","icon","appendTo","menu","action","attachCommandAction","_menu","map","item","command","event","handleActions","type","value","emit","ngOnInit","length","ctorParameters","propDecorators","args","selector","template","encapsulation","None","styles"],"sources":["/Users/gabriele/Training/ewc/projects/ewc/src/lib/components/_buttons/menu-button/menu-button.component.ts"],"sourcesContent":["import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./menu-button.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./menu-button.component.scss?ngResource\";\nimport { Component, EventEmitter, HostBinding, Input, Output, ViewEncapsulation } from '@angular/core';\nlet MenuButtonComponent = class MenuButtonComponent {\n    constructor() {\n        this.wrapperClassNames = '';\n        this.classNames = '';\n        this.label = '';\n        this.icon = '';\n        this.appendTo = '';\n        this.menu = [];\n        this.action = new EventEmitter();\n        /**\n         *  @description I attach a command ActionEvent for each menu items that will be emitted for the parent component\n         *  @param {MenuItem[]} menu\n         *  @return {VoidFunction}\n         */\n        this.attachCommandAction = (menu) => {\n            const _menu = [...menu];\n            _menu.map((item) => {\n                item.command = (event) => this.handleActions(item.label, event);\n                return item;\n            });\n        };\n        /**\n         *  @description I mount the Map type action event and I emit it into the parent component\n         * \tIf the event is already a Map type I get and remount data in a new one\n         *  @param {string | undefined} type\n         *  @param {Any} event\n         *  @return {VoidFunction}\n         */\n        this.handleActions = (type, event) => {\n            const action = { type: type, value: event };\n            this.action.emit(action);\n        };\n    }\n    /**\n     *  @description At init of the component I attach an ActionEvent into the MenuItems\n     *  @return {VoidFunction}\n     */\n    ngOnInit() {\n        this.menu && this.menu.length > 0 && this.attachCommandAction(this.menu);\n    }\n    static { this.ctorParameters = () => []; }\n    static { this.propDecorators = {\n        wrapperClassNames: [{ type: HostBinding, args: ['class',] }, { type: Input }],\n        classNames: [{ type: Input }],\n        label: [{ type: Input }],\n        icon: [{ type: Input }],\n        appendTo: [{ type: Input }],\n        menu: [{ type: Input }],\n        action: [{ type: Output }]\n    }; }\n};\nMenuButtonComponent = __decorate([\n    Component({\n        selector: 'ewc-menu-button',\n        template: __NG_CLI_RESOURCE__0,\n        encapsulation: ViewEncapsulation.None,\n        styles: [__NG_CLI_RESOURCE__1]\n    })\n], MenuButtonComponent);\nexport { MenuButtonComponent };\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,oBAAoB,MAAM,yCAAyC;AAC1E,OAAOC,oBAAoB,MAAM,yCAAyC;AAC1E,SAASC,SAAS,EAAEC,YAAY,EAAEC,WAAW,EAAEC,KAAK,EAAEC,MAAM,EAAEC,iBAAiB,QAAQ,eAAe;AACtG,IAAIC,mBAAmB,IAAAC,MAAA,GAAG,MAAMD,mBAAmB,CAAC;EAChDE,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,iBAAiB,GAAG,EAAE;IAC3B,IAAI,CAACC,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,IAAI,GAAG,EAAE;IACd,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,IAAI,GAAG,EAAE;IACd,IAAI,CAACC,MAAM,GAAG,IAAId,YAAY,EAAE;IAChC;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACe,mBAAmB,GAAIF,IAAI,IAAK;MACjC,MAAMG,KAAK,GAAG,CAAC,GAAGH,IAAI,CAAC;MACvBG,KAAK,CAACC,GAAG,CAAEC,IAAI,IAAK;QAChBA,IAAI,CAACC,OAAO,GAAIC,KAAK,IAAK,IAAI,CAACC,aAAa,CAACH,IAAI,CAACR,KAAK,EAAEU,KAAK,CAAC;QAC/D,OAAOF,IAAI;MACf,CAAC,CAAC;IACN,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACG,aAAa,GAAG,CAACC,IAAI,EAAEF,KAAK,KAAK;MAClC,MAAMN,MAAM,GAAG;QAAEQ,IAAI,EAAEA,IAAI;QAAEC,KAAK,EAAEH;MAAM,CAAC;MAC3C,IAAI,CAACN,MAAM,CAACU,IAAI,CAACV,MAAM,CAAC;IAC5B,CAAC;EACL;EACA;AACJ;AACA;AACA;EACIW,QAAQA,CAAA,EAAG;IACP,IAAI,CAACZ,IAAI,IAAI,IAAI,CAACA,IAAI,CAACa,MAAM,GAAG,CAAC,IAAI,IAAI,CAACX,mBAAmB,CAAC,IAAI,CAACF,IAAI,CAAC;EAC5E;AAWJ,CAAC,EAVYP,MAAA,CAAKqB,cAAc,GAAG,MAAM,EAAE,EAC9BrB,MAAA,CAAKsB,cAAc,GAAG;EAC3BpB,iBAAiB,EAAE,CAAC;IAAEc,IAAI,EAAErB,WAAW;IAAE4B,IAAI,EAAE,CAAC,OAAO;EAAG,CAAC,EAAE;IAAEP,IAAI,EAAEpB;EAAM,CAAC,CAAC;EAC7EO,UAAU,EAAE,CAAC;IAAEa,IAAI,EAAEpB;EAAM,CAAC,CAAC;EAC7BQ,KAAK,EAAE,CAAC;IAAEY,IAAI,EAAEpB;EAAM,CAAC,CAAC;EACxBS,IAAI,EAAE,CAAC;IAAEW,IAAI,EAAEpB;EAAM,CAAC,CAAC;EACvBU,QAAQ,EAAE,CAAC;IAAEU,IAAI,EAAEpB;EAAM,CAAC,CAAC;EAC3BW,IAAI,EAAE,CAAC;IAAES,IAAI,EAAEpB;EAAM,CAAC,CAAC;EACvBY,MAAM,EAAE,CAAC;IAAEQ,IAAI,EAAEnB;EAAO,CAAC;AAC7B,CAAC,EAAAG,MAAA,CACJ;AACDD,mBAAmB,GAAGT,UAAU,CAAC,CAC7BG,SAAS,CAAC;EACN+B,QAAQ,EAAE,iBAAiB;EAC3BC,QAAQ,EAAElC,oBAAoB;EAC9BmC,aAAa,EAAE5B,iBAAiB,CAAC6B,IAAI;EACrCC,MAAM,EAAE,CAACpC,oBAAoB;AACjC,CAAC,CAAC,CACL,EAAEO,mBAAmB,CAAC;AACvB,SAASA,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}