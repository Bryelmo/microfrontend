{"ast":null,"code":"import { moduleMetadata, componentWrapperDecorator } from '@storybook/angular';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { EventsViewComponent } from './events-view.component';\nimport { TableModule } from 'primeng/table';\nimport { LiveSearchInputComponent } from '../live-search-input/live-search-input.component';\nimport { ViewButtonsComponent } from '../view-buttons/view-buttons.component';\nimport { ToggleButtonModule } from 'primeng/togglebutton';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { ButtonModule } from 'primeng/button';\nimport { PrimeIcons } from 'primeng/api';\nimport { PanelModule } from 'primeng/panel';\nimport { ConfirmDialogButtonComponent } from '../../../_buttons/confirm-dialog-button/confirm-dialog-button.component';\nimport { OverlayPanelModule } from 'primeng/overlaypanel';\nimport { MenuModule } from 'primeng/menu';\nimport { ConfirmationService } from 'primeng/api';\nimport { ConfirmDialogModule } from 'primeng/confirmdialog';\nimport { TagModule } from 'primeng/tag';\nimport items from \"./sampleData.json\";\nconst meta = {\n  title: 'Views/EventsView',\n  component: EventsViewComponent,\n  tags: ['autodocs'],\n  decorators: [moduleMetadata({\n    imports: [BrowserAnimationsModule, TableModule, PanelModule, ToggleButtonModule, ButtonModule, InputTextModule, OverlayPanelModule, MenuModule, ConfirmDialogModule, TagModule],\n    declarations: [LiveSearchInputComponent, ViewButtonsComponent, ConfirmDialogButtonComponent],\n    providers: [ConfirmationService, ConfirmDialogButtonComponent],\n    schemas: []\n  }), componentWrapperDecorator(story => `<div style=\"width: 100%\">${story}</div>`)],\n  argTypes: {\n    wrapperClassNames: {\n      description: 'Custom CSS classes as component wraps'\n    },\n    classNames: {\n      description: 'Custom CSS classes'\n    },\n    lazy: {\n      description: 'Enable Lazy table'\n    },\n    loading: {\n      description: 'Enable loading icon'\n    },\n    columns: {\n      description: 'Columns names array list'\n    },\n    items: {\n      description: 'Data object array list'\n    },\n    key: {\n      description: 'Name of the item object property for uniquely identify a row'\n    },\n    rows: {\n      description: 'Number of rows to display per page.'\n    },\n    pages: {\n      description: 'Number of total pages coming from API response'\n    },\n    first: {\n      description: 'Number of skipped items (page * limit) coming from API response'\n    },\n    total: {\n      description: 'Number of total items.'\n    },\n    rowsPageOptions: {\n      description: 'List of the amount of items showed per page'\n    },\n    paginatorPosition: {\n      description: 'Position of the paginator as (es: top, bottom, both)',\n      control: \"select\",\n      options: ['top', 'bottom', 'both']\n    },\n    sortableColumns: {\n      description: 'Name array list for Sortable columns'\n    },\n    filtrableColumns: {\n      description: 'Name array list for Filtrable columns'\n    },\n    groupedBy: {\n      description: 'Name of the item object you want to organize'\n    },\n    menuActions: {\n      description: 'Actions menu list for Edit the single Row'\n    },\n    action: {\n      description: 'The Event action emitted for the parent component'\n    }\n  },\n  parameters: {\n    docs: {\n      description: {\n        component: `Component that uses [PrimeNg Table](https://primeng.org/table), \n\t\t\t\t\t\t\t[PrimeNg Panel](https://primeng.org/panel), [PrimeNg Overlay Panel](https://primeng.org/overlaypanel),\n\t\t\t\t\t\t\t[PrimeNg Button](https://primeng.org/button), [PrimeNg Tag](https://primeng.org/tag) and [PrimeNg Menu](https://primeng.org/menu)\n\t\t\t\t\t\t\twith other components of this library like:<br><br>\n\t\t\t\t\t\t\t• **<ewc-view-buttons>** for Collapsible button<br>\n\t\t\t\t\t\t\t• **<ewc-live-search-input>** for Live Search<br>\n\t\t\t\t\t\t\t• **<ewc-confirm-dialog-button>**  for delete the single event row<br><br>\n\t\t\t\t\t\t\tto create a collapsible table view for all the events.\n \t\t\t\t\t\t\tA main lazy loaded table handle the datas and splits and organize the item list for\n\t\t\t\t\t\t\ta specific property. All the triggered actions are dispatched from the child components \n\t\t\t\t\t\t\tto this component and emitted again into the main parent component.<br><br>\n\t\t\t\t\t\t\t• **[wrapperClassNames]** string data used for put CSS classes on the component tag element<br>\n\t\t\t\t\t\t\t• **[classNames]** string data used for put CSS classes to extend the default CSS com≤ponent class<br>\n\t\t\t\t\t\t\t• **[lazy]** boolean data needed for use the lazy load table feature<br>\n\t\t\t\t\t\t\t• **[loading]** boolean data used for trigger the core build loading icon<br>\n\t\t\t\t\t\t\t• **[columns]** array data list with the event properties used as column names<br>\n\t\t\t\t\t\t\t• **[items]** array events data list shown into the table<br>\n\t\t\t\t\t\t\t• **[key]** a string used for identify uniquely a row into the rows list<br>\n\t\t\t\t\t\t\t• **[rows]** a number that represent the amount of visible rows in the table (it \n\t\t\t\t\t\t\t\tshould comes from the API response)<br>\n\t\t\t\t\t\t\t• **[pages]** a number that represent the amount of pages in the table (it should \n\t\t\t\t\t\t\t\tcomes from the API response)<br>\n\t\t\t\t\t\t\t• **[first]** a number that represent the amount of skipped items in the table \n\t\t\t\t\t\t\t\t(it should comes from the API response, if not you can calculate it with page * limit)<br>\n\t\t\t\t\t\t\t• **[total]** a number that represent the amount of all the items (it should \n\t\t\t\t\t\t\t\tcomes from the API response)<br>\n\t\t\t\t\t\t\t• **[rowsPageOptions]** array of numbers used as choosable options for the amount of visible rows<br>\n\t\t\t\t\t\t\t• **[paginatorPosition]** string for decide where render the paginator on the table<br>\n\t\t\t\t\t\t\t• **[sortableColumns]** array string with the names of the sortable columns<br>\n\t\t\t\t\t\t\t• **[filtrableColumns]** array string with the names of the filterable columns<br>\n\t\t\t\t\t\t\t• **[groupedBy]** string as the name of the property you want organize the events<br>\n\t\t\t\t\t\t\t• **[menuActions]** array data list for the edit options dropdown menu using the \n\t\t\t\t\t\t\t\tsame structure of [PrimeNg MenuModelItem](https://primeng.org/menumodel)<br>\n\t\t\t\t\t\t\t• **(action)** Map data event action dispathed from the child component to the parent.`\n      }\n    }\n  }\n};\nexport default meta;\nconst sampleDropdownMenu = [{\n  label: 'Edit',\n  icon: PrimeIcons.PENCIL\n}, {\n  label: 'Export',\n  icon: PrimeIcons.FILE\n}, {\n  label: 'Duplicate',\n  icon: PrimeIcons.COPY\n}, {\n  label: 'Archive',\n  icon: PrimeIcons.SERVER\n}];\nconst sampleColumnsData = [{\n  key: 'id',\n  label: 'Id'\n}, {\n  key: 'url',\n  label: 'Url'\n}, {\n  key: 'sdate',\n  label: 'Start Date'\n}, {\n  key: 'edate',\n  label: 'End Date'\n}, {\n  key: 'manager',\n  label: 'Manager'\n}, {\n  key: 'status',\n  label: 'Status'\n}];\nexport const _eventsViewComponent = {\n  args: {\n    wrapperClassNames: '',\n    classNames: '',\n    lazy: true,\n    loading: false,\n    columns: sampleColumnsData,\n    items: items.items,\n    key: 'manager',\n    rows: 10,\n    pages: 10,\n    first: 10,\n    total: 100,\n    rowsPageOptions: [10, 50, 100],\n    paginatorPosition: 'both',\n    sortableColumns: ['id'],\n    filtrableColumns: [],\n    groupedBy: 'folder_id',\n    menuActions: sampleDropdownMenu\n  }\n};","map":{"version":3,"names":["moduleMetadata","componentWrapperDecorator","BrowserAnimationsModule","EventsViewComponent","TableModule","LiveSearchInputComponent","ViewButtonsComponent","ToggleButtonModule","InputTextModule","ButtonModule","PrimeIcons","PanelModule","ConfirmDialogButtonComponent","OverlayPanelModule","MenuModule","ConfirmationService","ConfirmDialogModule","TagModule","items","meta","title","component","tags","decorators","imports","declarations","providers","schemas","story","argTypes","wrapperClassNames","description","classNames","lazy","loading","columns","key","rows","pages","first","total","rowsPageOptions","paginatorPosition","control","options","sortableColumns","filtrableColumns","groupedBy","menuActions","action","parameters","docs","sampleDropdownMenu","label","icon","PENCIL","FILE","COPY","SERVER","sampleColumnsData","_eventsViewComponent","args"],"sources":["/Users/gabriele/Training/ewc/projects/ewc/src/lib/components/_views/_eventsView/events-view/events-view.component.stories.ts"],"sourcesContent":["import { moduleMetadata, componentWrapperDecorator } from '@storybook/angular';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { EventsViewComponent } from './events-view.component';\nimport { TableModule } from 'primeng/table';\nimport { LiveSearchInputComponent } from '../live-search-input/live-search-input.component';\nimport { ViewButtonsComponent } from '../view-buttons/view-buttons.component';\nimport { ToggleButtonModule } from 'primeng/togglebutton';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { ButtonModule } from 'primeng/button';\nimport { PrimeIcons } from 'primeng/api';\nimport { PanelModule } from 'primeng/panel';\nimport { ConfirmDialogButtonComponent } from '../../../_buttons/confirm-dialog-button/confirm-dialog-button.component';\nimport { OverlayPanelModule } from 'primeng/overlaypanel';\nimport { MenuModule } from 'primeng/menu';\nimport { ConfirmationService } from 'primeng/api';\nimport { ConfirmDialogModule } from 'primeng/confirmdialog';\nimport { TagModule } from 'primeng/tag';\nimport items from \"./sampleData.json\";\nconst meta = {\n    title: 'Views/EventsView',\n    component: EventsViewComponent,\n    tags: ['autodocs'],\n    decorators: [moduleMetadata({\n            imports: [\n                BrowserAnimationsModule,\n                TableModule,\n                PanelModule,\n                ToggleButtonModule,\n                ButtonModule,\n                InputTextModule,\n                OverlayPanelModule,\n                MenuModule,\n                ConfirmDialogModule,\n                TagModule\n            ],\n            declarations: [\n                LiveSearchInputComponent,\n                ViewButtonsComponent,\n                ConfirmDialogButtonComponent\n            ],\n            providers: [ConfirmationService, ConfirmDialogButtonComponent],\n            schemas: []\n        }),\n        componentWrapperDecorator((story) => `<div style=\"width: 100%\">${story}</div>`)],\n    argTypes: {\n        wrapperClassNames: { description: 'Custom CSS classes as component wraps' },\n        classNames: { description: 'Custom CSS classes' },\n        lazy: { description: 'Enable Lazy table' },\n        loading: { description: 'Enable loading icon' },\n        columns: { description: 'Columns names array list' },\n        items: { description: 'Data object array list' },\n        key: { description: 'Name of the item object property for uniquely identify a row' },\n        rows: { description: 'Number of rows to display per page.' },\n        pages: { description: 'Number of total pages coming from API response' },\n        first: { description: 'Number of skipped items (page * limit) coming from API response' },\n        total: { description: 'Number of total items.' },\n        rowsPageOptions: { description: 'List of the amount of items showed per page' },\n        paginatorPosition: {\n            description: 'Position of the paginator as (es: top, bottom, both)',\n            control: \"select\", options: ['top', 'bottom', 'both']\n        },\n        sortableColumns: { description: 'Name array list for Sortable columns' },\n        filtrableColumns: { description: 'Name array list for Filtrable columns' },\n        groupedBy: { description: 'Name of the item object you want to organize' },\n        menuActions: { description: 'Actions menu list for Edit the single Row' },\n        action: { description: 'The Event action emitted for the parent component' },\n    },\n    parameters: {\n        docs: {\n            description: {\n                component: `Component that uses [PrimeNg Table](https://primeng.org/table), \n\t\t\t\t\t\t\t[PrimeNg Panel](https://primeng.org/panel), [PrimeNg Overlay Panel](https://primeng.org/overlaypanel),\n\t\t\t\t\t\t\t[PrimeNg Button](https://primeng.org/button), [PrimeNg Tag](https://primeng.org/tag) and [PrimeNg Menu](https://primeng.org/menu)\n\t\t\t\t\t\t\twith other components of this library like:<br><br>\n\t\t\t\t\t\t\t• **<ewc-view-buttons>** for Collapsible button<br>\n\t\t\t\t\t\t\t• **<ewc-live-search-input>** for Live Search<br>\n\t\t\t\t\t\t\t• **<ewc-confirm-dialog-button>**  for delete the single event row<br><br>\n\t\t\t\t\t\t\tto create a collapsible table view for all the events.\n \t\t\t\t\t\t\tA main lazy loaded table handle the datas and splits and organize the item list for\n\t\t\t\t\t\t\ta specific property. All the triggered actions are dispatched from the child components \n\t\t\t\t\t\t\tto this component and emitted again into the main parent component.<br><br>\n\t\t\t\t\t\t\t• **[wrapperClassNames]** string data used for put CSS classes on the component tag element<br>\n\t\t\t\t\t\t\t• **[classNames]** string data used for put CSS classes to extend the default CSS com≤ponent class<br>\n\t\t\t\t\t\t\t• **[lazy]** boolean data needed for use the lazy load table feature<br>\n\t\t\t\t\t\t\t• **[loading]** boolean data used for trigger the core build loading icon<br>\n\t\t\t\t\t\t\t• **[columns]** array data list with the event properties used as column names<br>\n\t\t\t\t\t\t\t• **[items]** array events data list shown into the table<br>\n\t\t\t\t\t\t\t• **[key]** a string used for identify uniquely a row into the rows list<br>\n\t\t\t\t\t\t\t• **[rows]** a number that represent the amount of visible rows in the table (it \n\t\t\t\t\t\t\t\tshould comes from the API response)<br>\n\t\t\t\t\t\t\t• **[pages]** a number that represent the amount of pages in the table (it should \n\t\t\t\t\t\t\t\tcomes from the API response)<br>\n\t\t\t\t\t\t\t• **[first]** a number that represent the amount of skipped items in the table \n\t\t\t\t\t\t\t\t(it should comes from the API response, if not you can calculate it with page * limit)<br>\n\t\t\t\t\t\t\t• **[total]** a number that represent the amount of all the items (it should \n\t\t\t\t\t\t\t\tcomes from the API response)<br>\n\t\t\t\t\t\t\t• **[rowsPageOptions]** array of numbers used as choosable options for the amount of visible rows<br>\n\t\t\t\t\t\t\t• **[paginatorPosition]** string for decide where render the paginator on the table<br>\n\t\t\t\t\t\t\t• **[sortableColumns]** array string with the names of the sortable columns<br>\n\t\t\t\t\t\t\t• **[filtrableColumns]** array string with the names of the filterable columns<br>\n\t\t\t\t\t\t\t• **[groupedBy]** string as the name of the property you want organize the events<br>\n\t\t\t\t\t\t\t• **[menuActions]** array data list for the edit options dropdown menu using the \n\t\t\t\t\t\t\t\tsame structure of [PrimeNg MenuModelItem](https://primeng.org/menumodel)<br>\n\t\t\t\t\t\t\t• **(action)** Map data event action dispathed from the child component to the parent.`\n            }\n        }\n    },\n};\nexport default meta;\nconst sampleDropdownMenu = [\n    { label: 'Edit', icon: PrimeIcons.PENCIL },\n    { label: 'Export', icon: PrimeIcons.FILE },\n    { label: 'Duplicate', icon: PrimeIcons.COPY },\n    { label: 'Archive', icon: PrimeIcons.SERVER }\n];\nconst sampleColumnsData = [\n    { key: 'id', label: 'Id' },\n    { key: 'url', label: 'Url' },\n    { key: 'sdate', label: 'Start Date' },\n    { key: 'edate', label: 'End Date' },\n    { key: 'manager', label: 'Manager' },\n    { key: 'status', label: 'Status' }\n];\nexport const _eventsViewComponent = {\n    args: {\n        wrapperClassNames: '',\n        classNames: '',\n        lazy: true,\n        loading: false,\n        columns: sampleColumnsData,\n        items: items.items,\n        key: 'manager',\n        rows: 10,\n        pages: 10,\n        first: 10,\n        total: 100,\n        rowsPageOptions: [10, 50, 100],\n        paginatorPosition: 'both',\n        sortableColumns: ['id'],\n        filtrableColumns: [],\n        groupedBy: 'folder_id',\n        menuActions: sampleDropdownMenu\n    },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}