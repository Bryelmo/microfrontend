{"ast":null,"code":"var _class;\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./confirm-dialog-button.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./confirm-dialog-button.component.scss?ngResource\";\nimport { Component, EventEmitter, HostBinding, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { ConfirmationService } from 'primeng/api';\nimport { buttonsActionTypes } from '../actions';\nlet ConfirmDialogButtonComponent = (_class = class ConfirmDialogButtonComponent {\n  constructor(dialog) {\n    this.dialog = dialog;\n    this.wrapperClassNames = '';\n    this.classNames = '';\n    this.label = '';\n    this.icon = '';\n    this.dialogTitle = '';\n    this.dialogIcon = 'pi-exclamation-triangle';\n    this.dialogMessage = '';\n    this.action = new EventEmitter();\n    this.actionTypes = buttonsActionTypes;\n    /**\n     *  @description I trigger the opening of the Dialog box\n     *  @return {VoidFunction}\n     */\n    this.openDialog = () => {\n      this.dialog.confirm({\n        message: this.dialogMessage,\n        accept: () => {\n          this.handleActions(this.actionTypes.ACCEPT, {});\n        },\n        reject: () => {\n          this.handleActions(this.actionTypes.REJECT, {});\n        }\n      });\n    };\n    /**\n     *  @description I mount the Map type action event and I emit it into the parent component\n     *  @param {string | undefined} type\n     *  @param {Any} event\n     *  @return {VoidFunction}\n     */\n    this.handleActions = (type, event) => {\n      const action = {\n        type: type,\n        value: event\n      };\n      this.action.emit(action);\n    };\n  }\n  ngOnInit() {}\n}, _class.ctorParameters = () => [{\n  type: ConfirmationService\n}], _class.propDecorators = {\n  wrapperClassNames: [{\n    type: HostBinding,\n    args: ['class']\n  }, {\n    type: Input\n  }],\n  classNames: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  icon: [{\n    type: Input\n  }],\n  dialogTitle: [{\n    type: Input\n  }],\n  dialogIcon: [{\n    type: Input\n  }],\n  dialogMessage: [{\n    type: Input\n  }],\n  action: [{\n    type: Output\n  }]\n}, _class);\nConfirmDialogButtonComponent = __decorate([Component({\n  selector: 'ewc-confirm-dialog-button',\n  template: __NG_CLI_RESOURCE__0,\n  encapsulation: ViewEncapsulation.None,\n  providers: [ConfirmationService],\n  styles: [__NG_CLI_RESOURCE__1]\n})], ConfirmDialogButtonComponent);\nexport { ConfirmDialogButtonComponent };","map":{"version":3,"names":["__decorate","__NG_CLI_RESOURCE__0","__NG_CLI_RESOURCE__1","Component","EventEmitter","HostBinding","Input","Output","ViewEncapsulation","ConfirmationService","buttonsActionTypes","ConfirmDialogButtonComponent","_class","constructor","dialog","wrapperClassNames","classNames","label","icon","dialogTitle","dialogIcon","dialogMessage","action","actionTypes","openDialog","confirm","message","accept","handleActions","ACCEPT","reject","REJECT","type","event","value","emit","ngOnInit","ctorParameters","propDecorators","args","selector","template","encapsulation","None","providers","styles"],"sources":["/Users/gabriele/Training/ewc/projects/ewc/src/lib/components/_buttons/confirm-dialog-button/confirm-dialog-button.component.ts"],"sourcesContent":["import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./confirm-dialog-button.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./confirm-dialog-button.component.scss?ngResource\";\nimport { Component, EventEmitter, HostBinding, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { ConfirmationService } from 'primeng/api';\nimport { buttonsActionTypes } from '../actions';\nlet ConfirmDialogButtonComponent = class ConfirmDialogButtonComponent {\n    constructor(dialog) {\n        this.dialog = dialog;\n        this.wrapperClassNames = '';\n        this.classNames = '';\n        this.label = '';\n        this.icon = '';\n        this.dialogTitle = '';\n        this.dialogIcon = 'pi-exclamation-triangle';\n        this.dialogMessage = '';\n        this.action = new EventEmitter();\n        this.actionTypes = buttonsActionTypes;\n        /**\n         *  @description I trigger the opening of the Dialog box\n         *  @return {VoidFunction}\n         */\n        this.openDialog = () => {\n            this.dialog.confirm({\n                message: this.dialogMessage,\n                accept: () => { this.handleActions(this.actionTypes.ACCEPT, {}); },\n                reject: () => { this.handleActions(this.actionTypes.REJECT, {}); }\n            });\n        };\n        /**\n         *  @description I mount the Map type action event and I emit it into the parent component\n         *  @param {string | undefined} type\n         *  @param {Any} event\n         *  @return {VoidFunction}\n         */\n        this.handleActions = (type, event) => {\n            const action = { type: type, value: event };\n            this.action.emit(action);\n        };\n    }\n    ngOnInit() { }\n    static { this.ctorParameters = () => [\n        { type: ConfirmationService }\n    ]; }\n    static { this.propDecorators = {\n        wrapperClassNames: [{ type: HostBinding, args: ['class',] }, { type: Input }],\n        classNames: [{ type: Input }],\n        label: [{ type: Input }],\n        icon: [{ type: Input }],\n        dialogTitle: [{ type: Input }],\n        dialogIcon: [{ type: Input }],\n        dialogMessage: [{ type: Input }],\n        action: [{ type: Output }]\n    }; }\n};\nConfirmDialogButtonComponent = __decorate([\n    Component({\n        selector: 'ewc-confirm-dialog-button',\n        template: __NG_CLI_RESOURCE__0,\n        encapsulation: ViewEncapsulation.None,\n        providers: [ConfirmationService],\n        styles: [__NG_CLI_RESOURCE__1]\n    })\n], ConfirmDialogButtonComponent);\nexport { ConfirmDialogButtonComponent };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}